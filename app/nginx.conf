user nobody nogroup;
worker_processes auto;
pcre_jit on;
error_log /usr/local/openresty/nginx/logs/error.log;


events {
    worker_connections  1024;
}


http {

    include       mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /usr/local/openresty/nginx/logs/access.log main;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path /var/run/openresty/nginx-proxy;
    fastcgi_temp_path /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path /var/run/openresty/nginx-uwsgi;
    scgi_temp_path /var/run/openresty/nginx-scgi;

    sendfile on;
    keepalive_timeout 59;
    server_tokens off;

    resolver local=on;
    client_max_body_size 128k;
    client_body_buffer_size 128k;

    init_by_lua_block {

        cjson = require 'cjson'
        local geoip = require 'geoip.mmdb'

        local last_loaded = 0
        local reload_age = 10
        local prefix_db = nil
        local asn_db = nil

        function connect_to_databases(force_connect)
            local do_connect = false
            if force_connect then
                ngx.log(ngx.INFO, 'Force-connecting to databases')
                do_connect = true
            elseif not prefix_db or not asn_db then
                ngx.log(ngx.INFO, 'Making initial database connections')
                do_connect = true
            elseif (os.time() - last_loaded) > reload_age then
                ngx.log(ngx.INFO, 'Connection is stale, reloading database connections')
                do_connect = true
            end
            if do_connect then
                ngx.log(ngx.INFO, 'Connecting to databases')
                prefix_db = assert(geoip.load_database('/ipnetdb/ipnetdb_prefix_latest.mmdb'))
                asn_db = assert(geoip.load_database('/ipnetdb/ipnetdb_asn_latest.mmdb'))
                last_loaded = os.time()
            end
        end
        
        function lookup(db_name, query)
            local db = nil
            if db_name == 'prefix' then
                db = prefix_db
            elseif db_name == 'asn' then
                db = asn_db
            else
                ngx.log(ngx.ERR, 'Unknown database type: ', db)
                return nil
            end
            local result, err = db:lookup(query)
            if err then
                ngx.log(ngx.ERR, 'Query error (reconnecting): ', err)
                connect_to_databases(true)
            end
            local result, err = db:lookup(query)
            if err then
                ngx.log(ngx.ERR, 'Query error (failed): ', err)
                return nil
            else
                return result
            end
        end

    }

    server {

        error_log stderr info;
        access_log /dev/stdout;
        listen 80;
        server_name ipnetdb-service;
        charset utf-8;
        default_type text/html;
        root /app/docs;
        index index.html;
        error_page 403 /index.html;
        error_page 404 /index.html;
        error_page 500 502 503 504 /index.html;

        more_set_headers 'Server: IPNetDB Service';

        location = /healthcheck {
            limit_except GET {
                deny all;
            }
            default_type application/json;
            content_by_lua_block {
                ngx.say(cjson.encode({health = 'ok'}))
            }
        }

        location = /index {
            default_type application/json;
            alias /ipnetdb/index.json;
        }

        location ~ "^\/ip\/([0-9a-fA-F:\.]{7,39})$" {
            default_type application/json;
            content_by_lua_block {
                local ip = ngx.var[1]
                if not ip then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                connect_to_databases()
                local result = lookup('prefix', ip)
                if result then
                    ngx.say(cjson.encode({
                        type = 'ip',
                        query = ip,
                        status = 'found',
                        result = result
                    }))
                else
                    ngx.status = ngx.HTTP_NOT_FOUND
                    ngx.say(cjson.encode({
                        type = 'ip',
                        query = ip,
                        status = 'not found',
                        result = {}
                    }))
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
            }
        }

        location ~ "^\/as\/([0-9]{1,10})$" {
            default_type application/json;
            content_by_lua_block {
                local as = ngx.var[1]
                if not as then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                connect_to_databases()
                local result = lookup('asn', as)
                if result then
                    ngx.say(cjson.encode({
                        type = 'as',
                        query = as,
                        status = 'found',
                        result = result
                    }))
                else
                    ngx.status = ngx.HTTP_NOT_FOUND
                    ngx.say(cjson.encode({
                        type = 'as',
                        query = as,
                        status = 'not found',
                        result = {}
                    }))
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
            }
        }

    }
    
}
